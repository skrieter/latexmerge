#! /bin/bash

# -----------------------------------------------------------------------------
# latexmerge - A program mergeing a complex latex document with sub files
#              into a single file and copying all required to the same folder
# Copyright (C) 2023  Sebastian Krieter
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program  If not, see <https://www.gnu.org/licenses/>.
#
# See <https://github.com/skrieter/latexmerge> for further information.
# -----------------------------------------------------------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
NOCOLOR='\033[0m'

tex_file=$1

if [ $# -gt 1 ] ; then
    bibtool=$2
else
    bibtool="bibtex"
fi

out_path="merged"
temp_path="${out_path}/temp"

rm -r "${out_path}" >& /dev/null

mkdir "${out_path}" >& /dev/null

latexmk -C "${tex_file}" >& /dev/null

#-output-directory=${temp_path}
if pdflatex -draftmode -halt-on-error -shell-escape -interaction=batchmode  -cnf-line=max_print_line=1000 "${tex_file}" >&2 > /dev/null ; then
    echo -e "${GREEN}compiled original${NOCOLOR}"
else
	echo -e "${RED}could not compile original${NOCOLOR}" >&2
	exit 1
fi

if sed -n -E "s/^File: (.*) Graphic .*$/\1/p" ${tex_file}.log > imgs ; then
	echo -e "${GREEN}found image files${NOCOLOR}"
else
	echo -e "${RED}could not find image files${NOCOLOR}" >&2
	exit 1
fi

case ${bibtool} in
  bibtex)
    if bibtex -terse "${tex_file}.aux" > /dev/null ; then
		echo -e "${GREEN}run bibtex${NOCOLOR}"
		if latexpand --empty-comments --expand-usepackage --expand-bbl "${tex_file}.bbl" -o "${tex_file}_expand.tex" "${tex_file}.tex" &> /dev/null ; then
			echo -e "${GREEN}run latexpand${NOCOLOR}"
		else
			echo -e "${RED}could not run latexpand${NOCOLOR}" >&2
			exit 1
		fi
	else
		echo -e "${RED}could not run bibtex${NOCOLOR}" >&2
		if latexpand --empty-comments --expand-usepackage -o "${tex_file}_expand.tex" "${tex_file}.tex" &> /dev/null ; then
			echo -e "${GREEN}run latexpand${NOCOLOR}"
		else
			echo -e "${RED}could not run latexpand${NOCOLOR}" >&2
			exit 1
		fi
	fi
    ;;
  biber)
    if biber "${tex_file}.aux"  > /dev/null ; then
		echo -e "${GREEN}run biber${NOCOLOR}"
		if latexpand --empty-comments --expand-usepackage --biber "${tex_file}.bbl" -o "${tex_file}_expand.tex" "${tex_file}.tex" &> /dev/null ; then
			echo -e "${GREEN}run latexpand${NOCOLOR}"
		else
			echo -e "${RED}could not run latexpand${NOCOLOR}" >&2
			exit 1
		fi
	else
		echo -e "${RED}could not run biber${NOCOLOR}" >&2
		if latexpand --empty-comments --expand-usepackage -o "${tex_file}_expand.tex" "${tex_file}.tex" &> /dev/null ; then
			echo -e "${GREEN}run latexpand${NOCOLOR}"
		else
			echo -e "${RED}could not run latexpand${NOCOLOR}" >&2
			exit 1
		fi
	fi
    ;;
  *)
    echo -e "${RED}unkown bibtool ${bibtool}${NOCOLOR}" >&2
    exit 1
    ;;
esac

cp "${tex_file}.bbl" "${out_path}/${tex_file}.bbl" &> /dev/null

readarray -t tex_imgs < imgs
length=${#tex_imgs[@]}
for (( j=0; j<length; j++ ));
do
	img_path="${tex_imgs[$j]}"
	img_name=$(basename -- "$img_path")
	cp "$img_path" "${out_path}/$img_name" &> /dev/null
done
echo -e "${GREEN}moved images${NOCOLOR}"

if sed -E 's/(\\includegraphics\s*(\[.*\])?)\s*\{(.+\/)*(.*)\}/\1{\4}/' "${tex_file}_expand.tex" > ${tex_file}_expand2.tex ; then
	echo -e "${GREEN}replaced image paths in includegraphics${NOCOLOR}"
else
	echo -e "${RED}could not replace image paths in includegraphics${NOCOLOR}" >&2
	exit 1
fi

if sed -E 's/(\\graphicspath[\s{[]?)/%\1/' "${tex_file}_expand2.tex" > "${out_path}/paper.tex" ; then
	echo -e "${GREEN}disabled graphicspath command${NOCOLOR}"
else
	echo -e "${RED}could not disable graphicspath command${NOCOLOR}" >&2
	exit 1
fi

rm "${tex_file}_expand.tex"
rm "${tex_file}_expand2.tex"

cd ${out_path}

zip sources.zip *

if latexmk -quiet -silent -pdf -pdflatex="pdflatex -shell-escape -interaction=batchmode -halt-on-error" paper >& /dev/null ; then
	echo -e "${GREEN}compiled merged file${NOCOLOR}"
else
	echo -e "${RED}could not compile merged file${NOCOLOR}" >&2
	cat paper.log | grep "Error"
	exit 1
fi
latexmk -c paper >& /dev/null
