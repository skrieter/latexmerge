#! /bin/bash

# -----------------------------------------------------------------------------
# latexmerge - A program mergeing a complex latex document with sub files
#              into a single file and copying all required to the same folder
# Copyright (C) 2025  Sebastian Krieter
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program  If not, see <https://www.gnu.org/licenses/>.
#
# See <https://github.com/skrieter/latexmerge> for further information.
# -----------------------------------------------------------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
NOCOLOR='\033[0m'

tex_file=$1

if [ $# -gt 1 ] ; then
    bibtool=$2
else
    bibtool="bibtex"
fi

out_name="paper"
out_path="merged"
out_src="Source"
out_pdf="pdf"
out_path_src="${out_path}/${out_src}"
out_path_pdf="${out_path}/${out_pdf}"

log_file="${out_path}/latexmerge.log"

print_output() {
	if [ $1 -eq 0 ]; then
		echo -e "${GREEN}OK${NOCOLOR}"
	else
		echo -e "${RED}fail${NOCOLOR}" >&2
		cat ${log_file}
		exit 1
	fi
}

rm -r "${out_path}" >& /dev/null

mkdir "${out_path}" >& /dev/null
mkdir "${out_path_src}" >& /dev/null
mkdir "${out_path_pdf}" >& /dev/null

latexmk -C "${tex_file}" >& /dev/null

echo -e -n "${GREEN}Running pdflatex to compile original...${NOCOLOR}"
if pdflatex -draftmode -halt-on-error -shell-escape -interaction=batchmode -cnf-line=max_print_line=1000 "${tex_file}" > /dev/null 2>> ${log_file} ; then
    echo -e "${GREEN}OK${NOCOLOR}"
else
	echo -e "${RED}fail${NOCOLOR}" >&2
	cat ${log_file} | grep -E "^[!]"
	exit 1
fi

echo -e -n "${GREEN}Searching image files...${NOCOLOR}"
LC_CTYPE=C sed -n -E "s/^File: (.*) Graphic .*$/\1/p" ${tex_file}.log > imgs 2>> ${log_file}
print_output $?

bib_mode=${bibtool}
case ${bibtool} in
  bibtex)
	echo -e -n "${GREEN}Running bibtex...${NOCOLOR}"
    bibtex -terse "${tex_file}.aux" > ${log_file} 2>> /dev/null
    ;;
  biber)
	echo -e -n "${GREEN}Running biber...${NOCOLOR}"
    biber "${tex_file}.aux" > /dev/null 2>> ${log_file}
    ;;
  *)
    echo -e "${RED}unkown bibtool ${bibtool}${NOCOLOR}" >&2
    exit 1
    ;;
esac
if [ $? -eq 0 ]; then
	echo -e "${GREEN}OK${NOCOLOR}"
else
	echo -e "${RED}fail${NOCOLOR}" >&2
	cat ${log_file}
	bib_mode="none"
fi

echo -e -n "${GREEN}Running latexpand...${NOCOLOR}"
case ${bib_mode} in
  bibtex)
	latexpand --empty-comments --expand-usepackage --expand-bbl "${tex_file}.bbl" -o "${out_path}/${tex_file}_expand.tex" "${tex_file}.tex" > /dev/null 2>> ${log_file}
    ;;
  biber)
	latexpand --empty-comments --expand-usepackage --biber "${tex_file}.bbl" -o "${out_path}/${tex_file}_expand.tex" "${tex_file}.tex" > /dev/null 2>> ${log_file}
	;;
  none)
	latexpand --empty-comments --expand-usepackage -o "${out_path}/${tex_file}_expand.tex" "${tex_file}.tex" > /dev/null 2>> ${log_file}
    ;;
  *)
	echo -e "${RED}fail${NOCOLOR}" >&2
    echo -e "${RED}internal error: ${bib_mode}${NOCOLOR}" >&2
    exit 1
    ;;
esac
print_output $?

case ${bib_mode} in
  none)
	echo -e -n "${GREEN}Running bibexport...${NOCOLOR}"
	bibexport -t -o "${out_path_src}/literature.bib" "${tex_file}" > /dev/null 2>> ${log_file}
	print_output $?
	echo -e -n "${GREEN}Replacing bibliography...${NOCOLOR}"
	LC_CTYPE=C sed -E 's/(\\bibliography\s*(\[.*\])?)\s*\{.*\}/\1{literature.bib}/' "${out_path}/${tex_file}_expand.tex" > "${out_path}/${tex_file}_expand2.tex" 2>> ${log_file}
	print_output $?
	rm "${out_path}/${tex_file}_expand.tex"
	mv "${out_path}/${tex_file}_expand2.tex" "${out_path}/${tex_file}_expand.tex"
    ;;
esac

echo -e -n "${GREEN}Copying image files...${NOCOLOR}"
while IFS= read -r line; do tex_imgs+=($line) ; done < imgs
length=${#tex_imgs[@]}
for (( j=0; j<length; j++ ));
do
	img_path="${tex_imgs[$j]}"
	img_name=$(basename -- "$img_path")
	cp "$img_path" "${out_path_src}/$img_name" > /dev/null 2>> "${log_file}"
	if [ $? -ne 0 ]; then
		echo -e "${RED}fail${NOCOLOR}" >&2
		cat ${log_file}
		exit 1
	fi
done
echo -e "${GREEN}OK${NOCOLOR}"

echo -e -n "${GREEN}Replacing image paths in includegraphics...${NOCOLOR}"
LC_CTYPE=C sed -E 's/(\\includegraphics\s*(\[.*\])?)\s*\{(.+\/)*(.*)\}/\1{\4}/' "${out_path}/${tex_file}_expand.tex" > "${out_path}/${tex_file}_expand2.tex" 2>> ${log_file}
print_output $?
rm "${out_path}/${tex_file}_expand.tex"
mv "${out_path}/${tex_file}_expand2.tex" "${out_path}/${tex_file}_expand.tex"

echo -e -n "${GREEN}Disabling graphicspath command...${NOCOLOR}"
LC_CTYPE=C sed -E 's/(\\graphicspath[\s{[]?)/%\1/' "${out_path}/${tex_file}_expand.tex" > "${out_path_src}/${out_name}.tex" 2>> ${log_file}
print_output $?

latexmk -C "${tex_file}" >& /dev/null

cd ${out_path_src}
echo -e -n "${GREEN}Running latexmk to compile merged file...${NOCOLOR}"
if latexmk -quiet -silent -pdf -pdflatex="pdflatex -shell-escape -interaction=batchmode -halt-on-error" "${out_name}" > /dev/null 2>> "../../${log_file}" ; then
    echo -e "${GREEN}OK${NOCOLOR}"
else
	echo -e "${RED}fail${NOCOLOR}" >&2
	cat "../../${log_file}" | grep "Error"
	exit 1
fi
mv "${out_name}.pdf" "../${out_pdf}"
mv "${out_name}.bbl" "../"
latexmk -C "${out_name}" >& /dev/null
cd ..

echo -e -n "${GREEN}Creating zip file...${NOCOLOR}"
zip sources.zip Source pdf  > /dev/null 2>> "../${log_file}"
print_output $?
